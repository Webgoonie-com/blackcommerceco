// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Account {
  id                                  Int                       @id @default(autoincrement())
  uuid                                String?                   @default(uuid()) @unique
  type                                String
  provider                            String
  providerAccountId                   String
  refresh_token                       String?  
  access_token                        String?  
  expires_at                          Int?
  token_type                          String?
  scope                               String?
  id_token                            String?  
  session_state                       String?

  user                                User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int

  createdAt                           DateTime                  @default(now())
  updatedAt                           DateTime                  @default(now()) @updatedAt
}

model Admin {
  id                                  Int                       @id @default(autoincrement())
  uuid                                String                    @default(uuid()) @unique
  nickname                            String? 
  email                               String                    @unique
  emailVerified                       DateTime? 
  image                               String? 
  hashedPassword                      String? 
  firstName                           String? 
  lastName                            String?
  role                                String?
  updatedAt                           DateTime                 @default(now()) @updatedAt
  createdAt                           DateTime                 @default(now())
}

model Business {
  id                                  Int                      @id @default(autoincrement())
  uuid                                String                   @default(uuid()) @unique
  token                               String                   @unique
  title                               String
  description                         String
  
  isAFranchise                        Boolean
  isTheFranchiseParent                Boolean
  ownsOtherBusinesses                 Boolean
  hasStore                            Int
  hasProducts                         Int
  hasServices                         Int
  category                            String

  streetAddress                       String?
  streetAddress2                      String?
  streetCity                          String?
  streetZipCode                       String?
  locationValue                       String?

  sellPrice                           String?

  imageSrc                            String?                 @db.VarChar(1000)
  imagesMultiSrc                      String?                 @db.VarChar(1000)

  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt

  user                                User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int

  reservations                        ReservationBusiness[]
  favorites                           Favorite[]

  listing                             Listing[]
  listingId                           Int?                    @unique

  Businessphotos                      Businessphoto[]

  country                             Country?                @relation(fields: [countryId], references: [id])
  countryId                           Int
  countryStateRegion                  CountryStateRegion?     @relation(fields: [countryStateRegionId], references: [id])
  countryStateRegionId                Int
  countryCity                         CountryCity?            @relation(fields: [countryCityId], references: [id])
  countryCityId                       Int
  
}
model Businessphoto {
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  token                               String
  imgAlbumName                        String
  imgCatg                             String
  imageSrc                            String
  imagesMultiSrc                            String
  imgUrl                              String
  imgName                             String
  imgFileType                         String
  imgEncoding                         String
  imgFileOrigName                     String
  imgFileName                         String
  imgFileOutputDir                    String
  imgFilePath                         String
  imgFileSize                         Int
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt
  user                                User                    @relation(fields: [userId], references: [id])
  userId                              Int   
  listing                             Listing?                @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                           Int
  business                            Business?               @relation(fields: [businessId], references:[id], onDelete: Cascade)
  businessId                          Int
}

model Country {
  id                                  Int                     @id @default(autoincrement())
  uuid                                String?                 @default(uuid()) @unique
  value                               String
  label                               String
  currency                            String
  phonecode                           String
  flag                                String
  
  latlng                              String
  
  latitude                            String
  longitude                           String

  region                              String
  isoCode                             String                  @unique
  name                                String
  countryStateRegions                 CountryStateRegion[]
  countryCities                       CountryCity[]
  timezones                           CountryTimezone[]
  listings                            Listing[]
  propertys                           Property[]
  businesses                          Business[]
} 
  
model CountryStateRegion {  
  id                                  Int                     @id @default(autoincrement())
  uuid                                String?                 @default(uuid()) @unique
  isoCode                             String
  value                               String
  label                               String
  name                                String
  
  latlng                              String
  
  latitude                            String
  longitude                           String

  country                             Country                 @relation(fields: [countryId], references: [id])
  countryId                           Int
  
  // countryCity                         CountryCity             @relation(fields: [countryCityId], references: [id])
  // countryCityId                       Int
  
  countryCitys                        CountryCity[]

  listings                            Listing[]
  propertys                           Property[]
  businesses                          Business[]
    
} 
  
model CountryCity { 
  id                                  Int                     @id @default(autoincrement())
  uuid                                String?                 @default(uuid()) @unique
  value                               String
  label                               String
  name                                String
  countryCode                         String
  
  latlng                              String
  
  latitude                            String
  longitude                           String
  
  country                             Country                 @relation(fields: [countryId], references: [id])
  countryId                           Int
  
  countryStateRegion                  CountryStateRegion      @relation(fields: [countryStateRegionId], references: [id])
  countryStateRegionId                Int
                
  
  listings                            Listing[]
  propertys                           Property[]
  businesses                          Business[]
} 
  
model CountryTimezone { 
  id                                  Int                     @id @default(autoincrement())
  country                             Country                 @relation(fields: [countryId], references: [id])
  countryId                           Int
  countryTimezone                     String
} 
  
model Favorite {  
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int
  listingId                           Int?                    
  listing                             Listing?                @relation(fields: [listingId], references: [id])
  
  propertyId                          Int?
  propertys                           Property[]
  
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now())  @updatedAt
  
  business                            Business?                @relation(fields: [businessId], references:[id], onDelete: Cascade)
  businessId                          Int?          
}       
  
model ReservationBusiness { 
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  startDate                           DateTime
  endDate                             DateTime
  totalPrice                          Int
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt
  
  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int
  
  listing                             Listing?                 @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                           Int
  
  
  business                            Business?                @relation(fields: [businessId], references:[id], onDelete: Cascade)
  businessId                          Int
}
  
model ReservationProperty { 
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  startDate                           DateTime
  endDate                             DateTime
  totalPrice                          Decimal                 @db.Decimal(10, 2)
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt
  
  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int
  
  listing                             Listing?                 @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                           Int
  
  property                            Property?               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId                          Int

}

        

model Listing {         
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  token                               String
  title                               String
  description                         String
  imageSrc                            String?

  category                            String


  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now())        @updatedAt
  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int

  
  countryId                           Int
  country                             Country[]

  countryStateRegionId                Int?
  countryStateRegion                  CountryStateRegion[]

  countryCityId                       Int?
  countryCity                         CountryCity[]

  reservationId                       Int?
  reservationProperty                 ReservationProperty[]
  ReservationBusiness                 ReservationBusiness[]
  favorites                           Favorite[]

  property                            Property[]
  propertyId                          Int?


  business                            Business[]
  businessId                          Int?

  Propertyphotos                      Propertyphoto[]
  Businessphotos                      Businessphoto[]
  
}


model Property {
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  token                               String                  @unique
  title                               String
  description                         String
  imageSrc                            String?                 @db.VarChar(1000)
  imagesMultiSrc                      String?                 @db.VarChar(1000)


  category                            String
  roomCount                           Int
  bathroomCount                       Int
  guestCount                          Int
  locationValue                       String
  price                               String

  streetAddress                       String?
  streetAddress2                      String?
  streetCity                          String?
  streetZipCode                       String?
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt

  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int

  reservations                        ReservationProperty[]
  favorite                            Favorite?               @relation(fields: [favoriteId], references: [id])
  favoriteId                          Int?


  listing                             Listing[]
  listingId                           Int?                    @unique
  
  Propertyphotos                      Propertyphoto[]

  country                             Country?                 @relation(fields: [countryId], references: [id])
  countryId                           Int
  countryStateRegion                  CountryStateRegion?      @relation(fields: [countryStateRegionId], references: [id])
  countryStateRegionId                Int
  countryCity                         CountryCity?             @relation(fields: [countryCityId], references: [id])
  countryCityId                       Int
}

model Propertyphoto {
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
  token                               String
  imgAlbumName                        String
  imgCatg                             String
  imageSrc                            String
  imgUrl                              String
  imgName                             String
  imgFileType                         String
  imgEncoding                         String
  imgFileOrigName                     String
  imgFileName                         String
  imgFileOutputDir                    String
  imgFilePath                         String
  imgFileSize                         Int
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt

  user                                User                    @relation(fields: [userId], references: [id])
  userId                              Int
  listing                             Listing?                @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                           Int?
  property                            Property?               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId                          Int?
}

model TimeZone {
  id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid()) @unique
    
  name                              String
  offset                            String 
  abbreviation                      String
}

model User {            
  id                                  Int                     @id @default(autoincrement())
  uuid                                String?                 @default(uuid()) @unique
  name                                String?
  role                                String?
  email                               String                  @unique
  emailVerified                       DateTime? 
  image                               String? 
  phone                               String?
  hashedPassword                      String? 
  firstName                           String? 
  lastName                            String?
  updatedAt                           DateTime                @default(now()) @updatedAt
  createdAt                           DateTime                @default(now())

  favoriteIds                         Favorite[]
  userPhotos                          UserPhoto[]
  accounts                            Account[]
  listings                            Listing[]
  reservationProperty                 ReservationProperty[]
  reservationBusiness                 ReservationBusiness[]
  Propertys                           Property[]
  Propertyphotos                      Propertyphoto[]
  Business                            Business[]
  Businessphotos                      Businessphoto[]

}         

model UserPhoto {         
  Id                                  Int                     @id @default(autoincrement())
  uuid                                String                  @default(uuid())
  token                               String
  serverCaption                       String?
  userCaption                         String?
  imageSize                           Int?
  type                                String
  local                               String
  url                                 String
  filename                            String
  message                             String
  createdAt                           DateTime                @default(now())
  updatedAt                           DateTime                @default(now()) @updatedAt

  user                                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                              Int


} 

