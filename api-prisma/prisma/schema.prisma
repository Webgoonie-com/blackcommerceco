// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Account {
  id                                Int                       @id @default(autoincrement())
  uuid                              String?                   @default(uuid()) @unique
  type                              String
  provider                          String
  providerAccountId                 String
  refresh_token                     String?  
  access_token                      String?  
  expires_at                        Int?
  token_type                        String?
  scope                             String?
  id_token                          String?  
  session_state                     String?

  user                              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int

  createdAt                         DateTime                  @default(now())
  updatedAt                         DateTime                  @default(now()) @updatedAt
}         

model Admin {           
  id                                Int                       @id @default(autoincrement())
  uuid                              String                    @default(uuid()) @unique
  nickname                          String? 
  email                             String                    @unique
  emailVerified                     DateTime? 
  image                             String? 
  hashedPassword                    String? 
  firstName                         String? 
  lastName                          String?
  role                              String?
  updatedAt                         DateTime                  @default(now()) @updatedAt
  createdAt                         DateTime                  @default(now())
}


model Business {
  id                                Int                       @id @default(autoincrement())
  uuid                              String                    @default(uuid()) @unique
  title                             String
  description                       String
  location                          String
  localinfo                         String
  cityinfo                          String
  isAFranchise                      String
  isTheFranchiseParent              String
  ownsOtherBusinesses               String
  newStateCodeInfo                  String
  hasStore                          Int
  hasProducts                       Int
  hasServices                       Int
  category                          String
  locationValue                     String
  price                             String

  imageSrc                          String

  createdAt                         DateTime                  @default(now())
  updatedAt                         DateTime                  @default(now()) @updatedAt

  user                              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int

  reservations                      Reservation[]
  favorites                         Favorite[]

  Businessphotos                    Businessphoto[]
  
}

model Country {
  id                                Int                       @id @default(autoincrement())
  isoCode                           String                    @unique
  name                              String
  countryStateRegions               CountryStateRegion[]
  countryCities                     CountryCity[]
  timezones                         CountryTimezone[]
  propertys                         Property[]
  listings                          Listing[]
}

model CountryStateRegion {
  id                                Int                       @id @default(autoincrement())
  isoCode                           String
  name                              String
  latitude                          String
  longitude                         String

  country                           Country                   @relation(fields: [countryId], references: [id])
  countryId                         Int

  countryCity                       CountryCity               @relation(fields: [countryCityId], references: [id])
  countryCityId                     Int

  propertys                         Property[]
  listings                          Listing[]
  
}

model CountryCity {
id                                  Int                       @id @default(autoincrement())
isoCode                             String
name                                String
latitude                            String
longitude                           String

country                             Country                   @relation(fields: [countryId], references: [id])
countryId                           Int
              
countryStateRegion                  CountryStateRegion[]
propertys                           Property[]
listings                            Listing[]
}

model CountryTimezone {
  id                                Int                       @id @default(autoincrement())
  country                           Country                   @relation(fields: [countryId], references: [id])
  countryId                         Int
  timezone                          String
}


model Favorite {
  id                                Int                       @id @default(autoincrement())
  uuid                              String                    @default(uuid()) @unique
  user                              User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int
  listingId                         Int
  listing                           Listing[]

  property                          Property                  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId                        Int

  createdAt                         DateTime                  @default(now())
  updatedAt                         DateTime                  @default(now())  @updatedAt

  business                          Business                  @relation(fields: [businessId], references:[id], onDelete: Cascade)
  businessId                        Int          
}     

model User {            
  id                                Int                       @id @default(autoincrement())
  uuid                              String?                   @default(uuid()) @unique
  name                              String?
  role                              String?
  email                             String                    @unique
  emailVerified                     DateTime? 
  image                             String? 
  phone                             String?
  hashedPassword                    String? 
  firstName                         String? 
  lastName                          String?
  updatedAt                         DateTime                  @default(now()) @updatedAt
  createdAt                         DateTime                  @default(now())

  favoriteIds                       Favorite[]
  userPhotos                        UserPhoto[]
  accounts                          Account[]
  listings                          Listing[]
  reservations                      Reservation[]
  Propertys                         Property[]
  Propertyphotos                    Propertyphoto[]
  Business                          Business[]
  Businessphotos                    Businessphoto[]

}         

model UserPhoto {         
  Id                                Int                     @id @default(autoincrement())
  uuid                              String                  @default(uuid())
  serverCaption                     String?
  userCaption                       String?
  imageSize                         Int?
  type                              String
  local                             String
  url                               String
  filename                          String
  message                           String
  createdAt                         DateTime                @default(now())
  updatedAt                         DateTime                @default(now()) @updatedAt

  user                              User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int


}         

model Listing {         
  id                                Int                             @id @default(autoincrement())
  uuid                              String                          @default(uuid()) @unique
  title                             String
  description                       String
  imageSrc                          String

  category                          String
  roomCount                         Int
  bathroomCount                     Int
  guestCount                        Int
  locationValue                     String
  price                             String

  createdAt                         DateTime                        @default(now())
  updatedAt                         DateTime                        @default(now())        @updatedAt

  user                              User                            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int

   country              Country?            @relation(fields: [countryId], references: [id])
  countryId            Int

  countryStateRegion   CountryStateRegion? @relation(fields: [countryStateRegionId], references: [id])
  countryStateRegionId Int

  countryCity          CountryCity?        @relation(fields: [countryCityId], references: [id])
  countryCityId        Int

  reservations                      Reservation[]
  favorites                         Favorite[]

  property                          Property?
  Propertyphotos                    Propertyphoto[]
  Businessphotos                    Businessphoto[]
}


model Property {
  id                                Int                     @id @default(autoincrement())
  uuid                              String                  @default(uuid()) @unique
  title                             String
  description                       String
  imageSrc                          String
            
  category                          String
  roomCount                         Int
  bathroomCount                     Int
  guestCount                        Int
  locationValue                     String
  price                             String
          
  createdAt                         DateTime              @default(now())
  updatedAt                         DateTime              @default(now()) @updatedAt
          
  user                              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int
          
  reservations                      Reservation[]
  favorites                         Favorite[]
          
  Propertyphotos                    Propertyphoto[]

  listing                           Listing?            @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                         Int? @unique
          
  country                           Country               @relation(fields: [countryId], references: [id])
  countryId                         Int
  countryStateRegion                CountryStateRegion    @relation(fields: [countryStateRegionId], references: [id])
  countryStateRegionId              Int
  countryCity                       CountryCity           @relation(fields: [countryCityId], references: [id])
  countryCityId                     Int
}

model Propertyphoto {
    id                              Int                 @id @default(autoincrement())
    uuid                            String              @default(uuid()) @unique
    imgAlbumName                    String
    imgCatg                         String
    imageSrc                        String
    imgUrl                          String
    imgName                         String
    imgFileType                     String
    imgEncoding                     String
    imgFileOrigName                 String
    imgFileName                     String
    imgFileOutputDir                String
    imgFilePath                     String
    imgFileSize                     Int
    createdAt                       DateTime            @default(now())
    updatedAt                       DateTime            @default(now()) @updatedAt

    user                            User                @relation(fields: [userId], references: [id])
    userId                          Int

    listing                         Listing?            @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId                       Int?

    property                        Property            @relation(fields: [propertyId], references: [id], onDelete: Cascade)
    propertyId                      Int
}

model Businessphoto {
    id                              Int                     @id @default(autoincrement())
    uuid                            String                  @default(uuid()) @unique
    imgAlbumName                    String
    imgCatg                         String
    imageSrc                        String
    imgUrl                          String
    imgName                         String
    imgFileType                     String
    imgEncoding                     String
    imgFileOrigName                 String
    imgFileName                     Int
    imgFileOutputDir                Int
    guestCount                      Int
    locationValue                   String
    imgFileSize                     Int
    createdAt                       DateTime              @default(now())
    updatedAt                       DateTime              @default(now()) @updatedAt

    user                            User                  @relation(fields: [userId], references: [id])
    userId                          Int   

    listing                         Listing               @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId                       Int

    business                        Business @relation(fields: [businessId], references:[id], onDelete: Cascade)
    businessId                      Int
}

model Reservation {
  id                                Int                   @id @default(autoincrement())
  uuid                              String                @default(uuid()) @unique
  startDate                         DateTime
  endDate                           DateTime
  totalPrice                        Int
  createdAt                         DateTime              @default(now())
  updatedAt                         DateTime              @default(now()) @updatedAt

  user                              User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                            Int

  listing                           Listing               @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId                         Int

  property                          Property              @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId                        Int
  
  business                          Business              @relation(fields: [businessId], references:[id], onDelete: Cascade)
  businessId                        Int
}