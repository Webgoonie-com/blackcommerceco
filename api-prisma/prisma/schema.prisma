// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Account {
  id                  Int                     @id @default(autoincrement())
  uuid                String?                  @default(uuid()) @unique
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?  
  access_token        String?  
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?  
  session_state       String?

  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int

  @@unique([provider, providerAccountId])
  @@index([userId, providerAccountId, provider])
}

model Admin {  
  id                  Int                     @id @default(autoincrement())
  uuid                String                  @default(uuid()) @unique
  nickname            String? 
  email               String                  @unique
  emailVerified       DateTime? 
  image               String? 
  hashedPassword      String? 
  firstName           String? 
  lastName            String?
  role                String?
  updatedAt           DateTime                @default(now()) @updatedAt
  createdAt           DateTime                @default(now())
}

model Favorite {
  id                  Int                     @id @default(autoincrement())
  uuid                String                  @default(uuid()) @unique
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int
  listingId           Int
  listing             Listing[]

}

model User {  
  id                  Int                     @id @default(autoincrement())
  uuid                String?                 @default(uuid()) @unique
  name                String?
  role                String?
  email               String                  @unique
  emailVerified       DateTime? 
  image               String? 
  hashedPassword      String? 
  firstName           String? 
  lastName            String?
  updatedAt           DateTime                @default(now()) @updatedAt
  createdAt           DateTime                @default(now())

  favoriteIds         Favorite[]
  userPhotos          UserPhoto[]
  accounts            Account[]
  listings            Listing[]
  reservations        Reservation[]
  Propertyphotos      Propertyphoto[]
  Businessphotos      Businessphoto[]
  
}

model UserPhoto {
  Id                  Int @id @default(autoincrement())
  uuid                String @default(uuid())
  serverCaption       String?
  userCaption         String?
  imageSize           Int?
  type                String
  local               String
  url                 String
  filename            String
  message             String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt
  
  user                User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int

  @@index([userId])
}

model Listing {
  id                  Int                     @id @default(autoincrement())
  uuid                String                  @default(uuid()) @unique
  title               String
  description         String
  imageSrc            String
  createdAt           DateTime                @default(now())
  category            String
  roomCount           Int
  bathroomCount       Int
  guestCount          Int
  locationValue       String
  price               Int

  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int

  reservations        Reservation[]
  favorites           Favorite[]

  Propertyphotos      Propertyphoto[]
  Businessphotos      Businessphoto[]
}

model Propertyphoto {
    id                  Int                     @id @default(autoincrement())
    uuid                String                  @default(uuid()) @unique
    imgAlbumName        String
    imgCatg             String
    imageSrc            String
    imgUrl              String
    imgName             String
    imgFileType         String
    imgEncoding         String
    imgFileOrigName            String
    imgFileName           Int
    imgFileOutputDir       Int
    guestCount          Int
    locationValue       String
    imgFileSize               Int
    createdAt           DateTime                @default(now())

    user                User                    @relation(fields: [userId], references: [id])
    userId              Int

    listing             Listing                  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId           Int
}

model Businessphoto {
    id                  Int                     @id @default(autoincrement())
    uuid                String                  @default(uuid()) @unique
    imgAlbumName        String
    imgCatg             String
    imageSrc            String
    imgUrl              String
    imgName             String
    imgFileType         String
    imgEncoding         String
    imgFileOrigName            String
    imgFileName           Int
    imgFileOutputDir       Int
    guestCount          Int
    locationValue       String
    imgFileSize               Int
    createdAt           DateTime                @default(now())

    user                User                    @relation(fields: [userId], references: [id])
    userId              Int

    listing             Listing                  @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId           Int
}

model Reservation {
  id                  Int                     @id @default(autoincrement())
  uuid                String                  @default(uuid()) @unique
  startDate           DateTime
  endDate             DateTime
  totalPrice          Int
  createdAt           DateTime                @default(now())

  user                User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              Int

  listing             Listing                 @relation(fields: [listingId], references: [id], onDelete: Cascade)
  listingId           Int
}